package com.ge.capital.compliancereport.repository;


import com.ge.capital.compliancereport.domain.CompRequest;
import com.github.dandelion.datatables.core.ajax.ColumnDef;
import com.github.dandelion.datatables.core.ajax.DatatablesCriterias;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@SuppressWarnings("JpaQlInspection")
@Repository
public class RequestSearchRepository {

    public static final String BASE_QUERY = "SELECT c FROM CompRequest c";
    public static final String BASE_QUERY_COUNT = "SELECT count(c) FROM CompRequest c";

    @PersistenceContext
    private EntityManager entityManager;


    public List<CompRequest> findAll() {
        TypedQuery<CompRequest> query = entityManager.createQuery(BASE_QUERY, CompRequest.class);
        return query.getResultList();
    }

    /**
     * <p/>
     * Query used to populate the DataTables that display the list of persons.
     *
     * @param criterias The DataTables criterias used to filter the persons.
     *                  (maxResult, filtering, paging, ...)
     * @return a filtered list of persons.
     */
    public List<CompRequest> findRequestsWithDatatablesCriterias(DatatablesCriterias criterias) {

        //if no criteria present then find all
        if(criterias == null){
            TypedQuery<CompRequest> query = entityManager.createQuery(BASE_QUERY, CompRequest.class);
            return query.getResultList();
        }
        // 1st step filtering
        StringBuilder queryBuilder = generateFilteredQueryString(criterias);

        // 2nd step : sorting
        if (criterias.hasOneSortedColumn()) {

            List<String> orderParams = new ArrayList<String>();
            queryBuilder.append(" ORDER BY ");
            for (ColumnDef columnDef : criterias.getSortingColumnDefs()) {
                   orderParams.add("c." + columnDef.getName() + " " + columnDef.getSortDirection());
            }

            Iterator<String> itr2 = orderParams.iterator();
            while (itr2.hasNext()) {
                queryBuilder.append(itr2.next());
                if (itr2.hasNext()) {
                    queryBuilder.append(" , ");
                }
            }
        }

        TypedQuery<CompRequest> query = entityManager.createQuery(queryBuilder.toString(), CompRequest.class);

        // 3rd step : paging
        query.setFirstResult(criterias.getDisplayStart());
        query.setMaxResults(criterias.getDisplaySize());

        return query.getResultList();
    }

    /**
     * <p/>
     * Query used to return the number of filtered requests.
     *
     * @param criterias The DataTables criterias used to filter the requests.
     *                  (maxResult, filtering, paging, ...)
     * @return the number of filtered requests.
     */
    public Long getFilteredCount(DatatablesCriterias criterias) {
        //filtering
        StringBuilder queryBuilder = generateFilteredQueryString(criterias);
        //generate query
        Query query = entityManager.createQuery(queryBuilder.toString());
        //execute query
        return Long.parseLong(String.valueOf(query.getResultList().size()));
    }


    /**
     * This method will return the total count of all requests
     * @return the total count of requests.
     */
    public Long getTotalCount() {
        Query query = entityManager.createQuery(BASE_QUERY_COUNT);
        return (Long) query.getSingleResult();
    }


    /**
     * This method will generate the query string base on criterias
     * @param criterias
     * @return  filtered query string
     */
    private StringBuilder generateFilteredQueryString(DatatablesCriterias criterias) {
        StringBuilder queryBuilder = new StringBuilder(BASE_QUERY);
        List<String> paramList = new ArrayList<String>();

        // Filtering
        if (StringUtils.isNotBlank(criterias.getSearch()) && criterias.hasOneFilterableColumn()) {
            queryBuilder.append(" WHERE ");

            for (ColumnDef field : criterias.getColumnDefs()) {
                if (field.isFilterable()) {
                    paramList.add(" LOWER(c." + field.getName()
                            + ") LIKE '%?%'".replace("?", criterias.getSearch().toLowerCase()));
                }
            }

            Iterator<String> itr = paramList.iterator();
            while (itr.hasNext()) {
                queryBuilder.append(itr.next());
                if (itr.hasNext()) {
                    queryBuilder.append(" OR ");
                }
            }
        }
        return queryBuilder;
    }


    public void setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }
}
